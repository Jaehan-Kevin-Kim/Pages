{"ast":null,"code":"var _jsxFileName = \"F:\\\\Self Study_Coding\\\\Web\\\\Portfolio\\\\React_NodeBird\\\\preapre_second\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\n/*\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY,\r\n        document.documentElement.clientHeight,\r\n        document.documentElement.scrollHeight\r\n      );\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    //useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  console.log(\"mainPosts\", mainPosts);\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        // console.log(post)\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostsLoading = _useSelector2.loadPostsLoading;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(function () {\n    function onScroll() {\n      // console.log(\n      //   //scrollY: 현재 내가 얼마나 내렸는지 (스크롤내리고 올릴때마다 변함)\n      //   //clientHeight: 현재 화면에서 보이는 길이 (창 크기가 바뀌면 달라짐)\n      //   //scrollHeight: 총 scroll 길이\n      //   window.scrollY,\n      //   document.documentElement.clientHeight,\n      //   document.documentElement.scrollHeight\n      // );\n      if (window.ScrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if (hasMorePost) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll); // useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\n\n    return function () {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 14\n    }, _this), mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Home, \"i/nzWAUQQ+Depgog4i+rt8qcSuw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/pages/index.js"],"names":["useEffect","useDispatch","useSelector","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","loadPostsLoading","type","onScroll","window","ScrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","c","id"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,qBAAeC,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA1B;AAAA,MAAQC,EAAR,gBAAQA,EAAR;;AACA,sBAAqDT,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAAhE;AAAA,MAAQC,SAAR,iBAAQA,SAAR;AAAA,MAAmBC,WAAnB,iBAAmBA,WAAnB;AAAA,MAAgCC,gBAAhC,iBAAgCA,gBAAhC;;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAN,EAAAA,SAAS,CAAC,YAAM;AACd,aAASiB,QAAT,GAAoB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UACEC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,KACAF,QAAQ,CAACC,eAAT,CAAyBE,YAF3B,EAGE;AACA,YAAIT,WAAJ,EAAiB;AACfN,UAAAA,QAAQ,CAAC;AACPQ,YAAAA,IAAI,EAAEV;AADC,WAAD,CAAR;AAGD;AACF;AACF;;AACDY,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,QAAlC,EAtBc,CAuBd;;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,QAArC;AACD,KAFD;AAGD,GA3BQ,EA2BN,EA3BM,CAAT;AA6BA,sBACE,QAAC,SAAD;AAAA,eACGN,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,aADT,EAEGE,SAAS,CAACa,GAAV,CAAc,UAACC,CAAD;AAAA,0BACb,QAAC,QAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAeA,CAAC,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,eADa;AAAA,KAAd,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CAhDD;;GAAMrB,I;UACaN,W,EACFC,W,EACsCA,W;;;KAHjDK,I;AAkDN,eAAeA,IAAf","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\n\r\n/*\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY,\r\n        document.documentElement.clientHeight,\r\n        document.documentElement.scrollHeight\r\n      );\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    //useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  console.log(\"mainPosts\", mainPosts);\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        // console.log(post)\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n*/\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostsLoading } = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // console.log(\r\n      //   //scrollY: 현재 내가 얼마나 내렸는지 (스크롤내리고 올릴때마다 변함)\r\n      //   //clientHeight: 현재 화면에서 보이는 길이 (창 크기가 바뀌면 달라짐)\r\n      //   //scrollHeight: 총 scroll 길이\r\n      //   window.scrollY,\r\n      //   document.documentElement.clientHeight,\r\n      //   document.documentElement.scrollHeight\r\n      // );\r\n\r\n      if (\r\n        window.ScrollY + document.documentElement.clientHeight ===\r\n        document.documentElement.scrollHeight\r\n      ) {\r\n        if (hasMorePost) {\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    // useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((c) => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}