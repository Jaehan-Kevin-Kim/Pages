{"ast":null,"code":"// import React from \"react\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport reducer from \"../reducers/index\";\n\nconst configureStore = () => {\n  const middlewares = [thunkMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares)); //위 설명: 개발용 middleware랑 배포용 middleware는 다르기 때문에 위와 같이 정의 함.\n\n  const store = createStore(reducer, enhancer); // store.dispatch({\n  //   type: \"CHANGE_NICKNAME\",\n  //   data: \"Jaehan\",\n  // });\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n}); //위와 같이 하면 redux 사용시 문제점등이 더 자세히 나옴. 따라서 위와 같이 설정 하기\n\nexport default wrapper;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","thunkMiddleware","reducer","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA;AAEA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,WAAW,GAAG,CAACH,eAAD,CAApB;AACA,QAAMI,QAAQ,GACZ,QACIN,OAAO,CAACD,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CADX,GAEIJ,mBAAmB,CAACF,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAHzB,CAF2B,CAM3B;;AAEA,QAAME,KAAK,GAAGT,WAAW,CAACK,OAAD,EAAUG,QAAV,CAAzB,CAR2B,CAS3B;AACA;AACA;AACA;;AACA,SAAOC,KAAP;AACD,CAdD;;AAgBA,MAAMC,OAAO,GAAGX,aAAa,CAACO,cAAD,EAAiB;AAAEK,EAAAA,KAAK;AAAP,CAAjB,CAA7B,C,CACA;;AAEA,eAAeD,OAAf","sourcesContent":["// import React from \"react\";\r\n\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport reducer from \"../reducers/index\";\r\n\r\nconst configureStore = () => {\r\n  const middlewares = [thunkMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  //위 설명: 개발용 middleware랑 배포용 middleware는 다르기 때문에 위와 같이 정의 함.\r\n\r\n  const store = createStore(reducer, enhancer);\r\n  // store.dispatch({\r\n  //   type: \"CHANGE_NICKNAME\",\r\n  //   data: \"Jaehan\",\r\n  // });\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\" });\r\n//위와 같이 하면 redux 사용시 문제점등이 더 자세히 나옴. 따라서 위와 같이 설정 하기\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}