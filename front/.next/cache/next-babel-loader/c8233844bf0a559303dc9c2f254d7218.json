{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nvar initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport var loginAction = function loginAction(data) {\n  return {\n    type: \"LOG_IN\",\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: \"LOG_OUT\"\n  };\n}; // reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log(\"HYDRATE\", action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n  }\n};\n\nexport default rootReducer;\n/*\r\nconst initialState = {\r\n  name: \"kevin\",\r\n  age: 34,\r\n  password: \"password\",\r\n};\r\n\r\n// action creator\r\nconst changeNickname = {\r\n  type: \"CHANGE_NICKNAME\",\r\n  data: \"jaehan\",\r\n};\r\n\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data: data,\r\n  };\r\n};\r\n\r\nchangeNickname(\"boogicho\"); //아래와 같음\r\n// {\r\n//    type: 'CHANGE_NICKNAME',\r\n//    data: 'neue zeal',\r\n// }\r\n//\r\n\r\n//최종적으로 아래와 같이 사용가능\r\n// 1. 위 처럼 changeNickname을 선언하고\r\n// 2. 아래와 같이 dispatch를 시켜 줌.\r\nstore.dispatch(changeNickname(\"holly\"));\r\n\r\n\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_NICKNAME\":\r\n      return { ...state, name: action.data };\r\n  }\r\n};\r\n\r\n*/","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,KADR;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADa;AAOnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPa,CAArB;AAYA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBZ,YAAyB;AAAA,MAAXa,MAAW;;AACpD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKV,OAAL;AACEe,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACF,SAAK,QAAL;AACE,6CAAYJ,KAAZ;AAAmBX,QAAAA,IAAI,kCAAOW,KAAK,CAACX,IAAb;AAAmBC,UAAAA,UAAU,EAAE,IAA/B;AAAqCD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAAlD;AAAvB;;AACF,SAAK,SAAL;AACE,6CAAYI,KAAZ;AAAmBX,QAAAA,IAAI,kCAAOW,KAAK,CAACX,IAAb;AAAmBC,UAAAA,UAAU,EAAE,KAA/B;AAAsCD,UAAAA,IAAI,EAAE;AAA5C;AAAvB;AAPJ;AASD,CAVD;;AAYA,eAAeU,WAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nconst initialState = {\r\n  user: {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n\r\nexport const loginAction = (data) => {\r\n  return {\r\n    type: \"LOG_IN\",\r\n    data,\r\n  };\r\n};\r\nexport const logoutAction = () => {\r\n  return {\r\n    type: \"LOG_OUT\",\r\n  };\r\n};\r\n\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      console.log(\"HYDRATE\", action);\r\n      return { ...state, ...action.payload };\r\n    case \"LOG_IN\":\r\n      return { ...state, user: { ...state.user, isLoggedIn: true, user: action.data } };\r\n    case \"LOG_OUT\":\r\n      return { ...state, user: { ...state.user, isLoggedIn: false, user: null } };\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n\r\n/*\r\nconst initialState = {\r\n  name: \"kevin\",\r\n  age: 34,\r\n  password: \"password\",\r\n};\r\n\r\n// action creator\r\nconst changeNickname = {\r\n  type: \"CHANGE_NICKNAME\",\r\n  data: \"jaehan\",\r\n};\r\n\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data: data,\r\n  };\r\n};\r\n\r\nchangeNickname(\"boogicho\"); //아래와 같음\r\n// {\r\n//    type: 'CHANGE_NICKNAME',\r\n//    data: 'neue zeal',\r\n// }\r\n//\r\n\r\n//최종적으로 아래와 같이 사용가능\r\n// 1. 위 처럼 changeNickname을 선언하고\r\n// 2. 아래와 같이 dispatch를 시켜 줌.\r\nstore.dispatch(changeNickname(\"holly\"));\r\n\r\n\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_NICKNAME\":\r\n      return { ...state, name: action.data };\r\n  }\r\n};\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}