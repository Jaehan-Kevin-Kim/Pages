{"ast":null,"code":"import { all, fork, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n} // const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\n// l.next();\n// l.next();\n\n\nfunction* logIn(action) {\n  //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\n  //put은 dispatch라고 생각하기\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\"\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n} //take는 뒤에 action이 실행 될때까지 기다리겠다는 뜻 (take('LOG_IN', login)) => 'LOG_IN'(action)이 실행 될때 까지 기다리고, 실행 되면 뒤에 logIn function을 실행 함.\n// event listener 같은 역할을 하지만 치명적인 단점은 1회용임. (한번 실행되고 나면 해당 event listner가 사라짐. 따라서 while로 감싸주거나 takeEvery로 받아 줘야 함.)\n\n\nfunction* watchLogin() {\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(\"LOG_OUT_REQUEST\");\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(\"ADD_POST_REQUEST\");\n}\n\nexport default function* rootSaga() {\n  //ALL을 하면 배열안의 모든 것들을 한번에 다 실행 함.\n  //fork는 함수를 실행한다는 뜻 .\n  //fork대신 call을 쓰는 경우도 있음. 하지만 두개의 차이점 정확히 알기.\n  //ㄴ FORK는 비동기 함수 호출 / call은 동기 함수 호출\n  // yield는 await과 비슷함.\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/index.js"],"names":["all","fork","takeEvery","axios","logInAPI","data","post","logIn","action","result","call","put","type","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogin","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,SAApB,QAAqC,oBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD,C,CAED;AACA;AACA;;;AAEA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB;AACA;AACA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACN,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB;AACA,UAAMM,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERP,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERP,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,GAAqB;AACnB,SAAOZ,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMP,MAAM,GAAG,MAAMC,IAAI,CAACK,SAAD,CAAzB;AACA,UAAMJ,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERP,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERP,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASY,UAAT,CAAoBZ,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUa,OAAV,CAAkBV,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACO,UAAD,EAAaT,MAAM,CAACH,IAApB,CAAzB;AACA,UAAMM,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERP,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;AACA;;;AACA,UAAUc,UAAV,GAAuB;AACrB,QAAMjB,SAAS,CAAC,gBAAD,EAAmBK,KAAnB,CAAf;AACD;;AAED,UAAUa,WAAV,GAAwB;AACtB,QAAMlB,SAAS,CAAC,iBAAD,CAAf;AACD;;AACD,UAAUmB,YAAV,GAAyB;AACvB,QAAMnB,SAAS,CAAC,kBAAD,CAAf;AACD;;AAED,eAAe,UAAUoB,QAAV,GAAqB;AAClC;AACA;AACA;AACA;AACA;AACA,QAAMtB,GAAG,CAAC,CAACC,IAAI,CAACkB,UAAD,CAAL,EAAmBlB,IAAI,CAACmB,WAAD,CAAvB,EAAsCnB,IAAI,CAACoB,YAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, takeEvery } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\r\n// l.next();\r\n// l.next();\r\n\r\nfunction* logIn(action) {\r\n  //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\r\n  //put은 dispatch라고 생각하기\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: \"ADD_POST_SUCCESS\",\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n//take는 뒤에 action이 실행 될때까지 기다리겠다는 뜻 (take('LOG_IN', login)) => 'LOG_IN'(action)이 실행 될때 까지 기다리고, 실행 되면 뒤에 logIn function을 실행 함.\r\n// event listener 같은 역할을 하지만 치명적인 단점은 1회용임. (한번 실행되고 나면 해당 event listner가 사라짐. 따라서 while로 감싸주거나 takeEvery로 받아 줘야 함.)\r\nfunction* watchLogin() {\r\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(\"LOG_OUT_REQUEST\");\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeEvery(\"ADD_POST_REQUEST\");\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  //ALL을 하면 배열안의 모든 것들을 한번에 다 실행 함.\r\n  //fork는 함수를 실행한다는 뜻 .\r\n  //fork대신 call을 쓰는 경우도 있음. 하지만 두개의 차이점 정확히 알기.\r\n  //ㄴ FORK는 비동기 함수 호출 / call은 동기 함수 호출\r\n  // yield는 await과 비슷함.\r\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}