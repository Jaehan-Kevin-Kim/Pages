{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n} // const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\n// l.next();\n// l.next();\n\n\nfunction* logIn(action) {\n  //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\n  //put은 dispatch라고 생각하기\n  try {\n    console.log(\"saga login\"); // const result = yield call(logInAPI, action.data);\n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    console.log(\"saga logout\"); // const result = yield call(logOutAPI);\n\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/user.js"],"names":["axios","all","fork","put","takeLatest","delay","logInAPI","data","post","logIn","action","console","log","type","LOG_IN_SUCCESS","err","LOG_IN_FAILURE","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD,C,CAED;AACA;AACA;;;AAEA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB;AACA;AACA,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADE,CAEF;;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEC,cADE;AAERP,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GARD,CAQE,OAAOQ,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEG,cADE;AAERC,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaX;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASY,SAAT,GAAqB;AACnB,SAAOnB,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUY,MAAV,GAAmB;AACjB,MAAI;AACFT,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADE,CAEF;;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEQ,eADE,CAER;;AAFQ,KAAD,CAAT;AAID,GARD,CAQE,OAAON,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAES,eADE;AAERL,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaX;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUgB,UAAV,GAAuB;AACrB,QAAMnB,UAAU,CAACoB,cAAD,EAAiBf,KAAjB,CAAhB;AACD;;AAED,UAAUgB,WAAV,GAAwB;AACtB,QAAMrB,UAAU,CAACsB,eAAD,EAAkBN,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAM1B,GAAG,CAAC,CAACC,IAAI,CAACqB,UAAD,CAAL,EAAmBrB,IAAI,CAACuB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\r\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\r\n// l.next();\r\n// l.next();\r\n\r\nfunction* logIn(action) {\r\n  //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\r\n  //put은 dispatch라고 생각하기\r\n  try {\r\n    console.log(\"saga login\");\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    console.log(\"saga logout\");\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      //   data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}