{"ast":null,"code":"import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\n/*\r\nconst initialState = {\r\n  user: {\r\n    //아래 세부 내용들은 redux쪼개기 할때 각각의 파일로 들어갔음.\r\n    // isLoggedIn: false,\r\n    // user: null,\r\n    // signUpData: {},\r\n    // loginData: {},\r\n  },\r\n  post: {\r\n    // mainPosts: [],\r\n  },\r\n};\r\n*/\n//역시나 아래 내용들은 분리된 redux 중 맞는 값에 넣음\n// export const loginAction = (data) => {\n//   return {\n//     type: \"LOG_IN\",\n//     data,\n//   };\n// };\n// export const logoutAction = () => {\n//   return {\n//     type: \"LOG_OUT\",\n//   };\n// };\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    default:\n      {\n        var combinedReducer = combineReducers({\n          user: user,\n          post: post\n        });\n      }\n  }\n};\n/*\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n\r\n      //역시나 아래 내용들은 분리된 redux 중 맞는 값에 넣음\r\n      // case \"LOG_IN\":\r\n      //   return { ...state, user: { ...state.user, isLoggedIn: true, user: action.data } };\r\n      // case \"LOG_OUT\":\r\n      //   return { ...state, user: { ...state.user, isLoggedIn: false, user: null } };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n*/\n\n\nexport default rootReducer;\n/*\r\nconst initialState = {\r\n  name: \"kevin\",\r\n  age: 34,\r\n  password: \"password\",\r\n};\r\n\r\n// action creator\r\nconst changeNickname = {\r\n  type: \"CHANGE_NICKNAME\",\r\n  data: \"jaehan\",\r\n};\r\n\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data: data,\r\n  };\r\n};\r\n\r\nchangeNickname(\"boogicho\"); //아래와 같음\r\n// {\r\n//    type: 'CHANGE_NICKNAME',\r\n//    data: 'neue zeal',\r\n// }\r\n//\r\n\r\n//최종적으로 아래와 같이 사용가능\r\n// 1. 위 처럼 changeNickname을 선언하고\r\n// 2. 아래와 같이 dispatch를 시켜 줌.\r\nstore.dispatch(changeNickname(\"holly\"));\r\n\r\n\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_NICKNAME\":\r\n      return { ...state, name: action.data };\r\n  }\r\n};\r\n\r\n*/","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","state","action","type","combinedReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE;AAAS;AACP,YAAMC,eAAe,GAAGP,eAAe,CAAC;AACtCC,UAAAA,IAAI,EAAJA,IADsC;AAEtCC,UAAAA,IAAI,EAAJA;AAFsC,SAAD,CAAvC;AAID;AANH;AAQD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeC,WAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\n\r\n/*\r\nconst initialState = {\r\n  user: {\r\n    //아래 세부 내용들은 redux쪼개기 할때 각각의 파일로 들어갔음.\r\n    // isLoggedIn: false,\r\n    // user: null,\r\n    // signUpData: {},\r\n    // loginData: {},\r\n  },\r\n  post: {\r\n    // mainPosts: [],\r\n  },\r\n};\r\n*/\r\n\r\n//역시나 아래 내용들은 분리된 redux 중 맞는 값에 넣음\r\n// export const loginAction = (data) => {\r\n//   return {\r\n//     type: \"LOG_IN\",\r\n//     data,\r\n//   };\r\n// };\r\n// export const logoutAction = () => {\r\n//   return {\r\n//     type: \"LOG_OUT\",\r\n//   };\r\n// };\r\n\r\nconst rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    default: {\r\n      const combinedReducer = combineReducers({\r\n        user,\r\n        post,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n/*\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n\r\n      //역시나 아래 내용들은 분리된 redux 중 맞는 값에 넣음\r\n      // case \"LOG_IN\":\r\n      //   return { ...state, user: { ...state.user, isLoggedIn: true, user: action.data } };\r\n      // case \"LOG_OUT\":\r\n      //   return { ...state, user: { ...state.user, isLoggedIn: false, user: null } };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n*/\r\n\r\nexport default rootReducer;\r\n\r\n/*\r\nconst initialState = {\r\n  name: \"kevin\",\r\n  age: 34,\r\n  password: \"password\",\r\n};\r\n\r\n// action creator\r\nconst changeNickname = {\r\n  type: \"CHANGE_NICKNAME\",\r\n  data: \"jaehan\",\r\n};\r\n\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data: data,\r\n  };\r\n};\r\n\r\nchangeNickname(\"boogicho\"); //아래와 같음\r\n// {\r\n//    type: 'CHANGE_NICKNAME',\r\n//    data: 'neue zeal',\r\n// }\r\n//\r\n\r\n//최종적으로 아래와 같이 사용가능\r\n// 1. 위 처럼 changeNickname을 선언하고\r\n// 2. 아래와 같이 dispatch를 시켜 줌.\r\nstore.dispatch(changeNickname(\"holly\"));\r\n\r\n\r\n// reducer (이전상태, 액션) => 다음상태 (이전상태와, 액션을 통해서 다음 상태를 만들어 내는 함수)\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_NICKNAME\":\r\n      return { ...state, name: action.data };\r\n  }\r\n};\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}