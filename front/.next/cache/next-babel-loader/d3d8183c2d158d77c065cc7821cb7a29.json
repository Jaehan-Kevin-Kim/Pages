{"ast":null,"code":"// import shortId from \"shortid\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport const initialState = {\n  /*\r\n  // mainPosts: [\r\n  //   // {\r\n  //   //   id: 1,\r\n  //   //   User: {\r\n  //   //     id: 1,\r\n  //   //     nickname: \"Kevin\",\r\n  //   //   },\r\n  //   //   content: \"First Post #HashTag, #Express\",\r\n  //   //   // Images: [\r\n  //   //   //   {\r\n  //   //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n  //   //   //   },\r\n  //   //   // ],\r\n  //   //   Images: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n  //   //     },\r\n  //   //   ],\r\n  //   //   Comments: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"nero\",\r\n  //   //       },\r\n  //   //       content: \"Great post!\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"jaehan\",\r\n  //   //       },\r\n  //   //       content: `it's really educational`,\r\n  //   //     },\r\n  //   //   ],\r\n  //   // },\r\n  // ],\r\n  */\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\n/*\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n    */\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\"; //Remove Image경우 하나만 만들면 됨(동기이기 때문에). 만약 서버에서도 빼주고 싶다면 보통 다른 것들과 같이 request,success,failure 다 해줘야 함. image의 경우 서버에서 가지고 있는게 더 이득이기때문에 프론트에서만 지워주는 경우가 많암. (지금은 프론트에서만 지우기때문에 request,success,failure등이 필요 없음)\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n/*\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n*/\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => {\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\n  return produce(state, draft => {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        {\n          draft.retweetLoading = true;\n          draft.retweetDone = false;\n          draft.retweetError = null;\n          break;\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        {\n          draft.retweetLoading = false;\n          draft.retweetError = action.error;\n          break;\n        }\n      // 아래가 request, success, failure가 아닌 remove_image 하나인 이유는 동기 함수이기 때문. (back-end에서 요청을 기다려서 받는게 아닌 그냥 front-end측에서만 지우고, backend에서는 사진을 남겨 둠.)\n\n      case REMOVE_IMAGE:\n        {\n          draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n          break;\n        }\n\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          draft.uploadImagesLoading = true;\n          draft.uploadImagesDone = false;\n          draft.uploadImagesError = null;\n          break;\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          draft.imagePaths = action.data;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesError = action.error;\n          break;\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          draft.likePostLoading = true;\n          draft.likePostDone = false;\n          draft.likePostError = null;\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          draft.likePostLoading = false;\n          draft.likePostError = action.error;\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          draft.unlikePostLoading = true;\n          draft.unlikePostDone = false;\n          draft.unlikePostError = null;\n          break;\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        {\n          draft.loadPostLoading = true;\n          draft.loadPostDone = false;\n          draft.loadPostError = null;\n          break;\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          draft.loadPostLoading = false;\n          draft.loadPostDone = true;\n          draft.singlePost = action.data;\n          break;\n        }\n\n      case LOAD_POST_FAILURE:\n        {\n          draft.loadPostLoading = false;\n          draft.loadPostError = action.error;\n          break;\n        }\n\n      case LOAD_USER_POST_REQUEST:\n        {\n          draft.loadUserPostLoading = true;\n          draft.loadUserPostDone = false;\n          draft.loadUserPostError = null;\n          break;\n        }\n\n      case LOAD_USER_POST_SUCCESS:\n        {\n          draft.loadUserPostLoading = false;\n          draft.loadUserPostDone = true;\n          draft.singleUSER_Post = action.data;\n          break;\n        }\n\n      case LOAD_USER_POST_FAILURE:\n        {\n          draft.loadUserPostLoading = false;\n          draft.loadUserPostError = action.error;\n          break;\n        }\n\n      case LOAD_POSTS_REQUEST:\n        {\n          draft.loadPostsLoading = true;\n          draft.loadPostsDone = false;\n          draft.loadPostsError = null;\n          break;\n        }\n\n      case LOAD_POSTS_SUCCESS:\n        {\n          draft.loadPostsLoading = false;\n          draft.loadPostsDone = true;\n          draft.mainPosts = draft.mainPosts.concat(action.data);\n          draft.hasMorePosts = action.data.length === 10;\n          break;\n        }\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        {\n          draft.addPostLoading = true;\n          draft.addPostDone = false;\n          draft.addPostError = null;\n          break; // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = true; // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; // 이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\n          // draft.mainPosts.unshift(dummyPost(action.data));\n\n          draft.mainPosts.unshift(action.data);\n          draft.imagePaths = [];\n          break; // action.data.content, postId, userId;\n          // return {\n          //   ...state,\n          //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          //   addPostLoading: false,\n          //   addPostDone: true,\n          // };\n        }\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return { ...state, addPostLoading: false, addPostError: action.error };\n\n      case REMOVE_POST_REQUEST:\n        {\n          draft.removePostLoading = true;\n          draft.removePostDone = false;\n          draft.removePostError = null;\n          break; // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          // action.data.content, postId, userId;\n          draft.removePostLoading = false;\n          draft.removePostDone = true;\n          draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n          break;\n          /*\r\n          // return {\r\n          //   ...state,\r\n          //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n          //   removePostLoading: false,\r\n          //   removePostDone: true,\r\n          // };\r\n          */\n        }\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n      // return { ...state, removePostLoading: false, removePostError: action.error };\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.addCommentLoading = true;\n          draft.addCommentDone = false;\n          draft.addCommentError = null;\n          break; // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\n        }\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCoomentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\n\n      default:\n        {\n          break; // return { ...state };\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePosts","likePostLoading","likePostDone","likePostError","loadPostLoading","loadPostDone","loadPostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","LOAD_USER_POST_REQUEST","loadUserPostLoading","loadUserPostDone","loadUserPostError","LOAD_USER_POST_SUCCESS","singleUSER_Post","LOAD_USER_POST_FAILURE","concat","length","Comments","addCoomentLoading"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,OAApB,C,CACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,EAxDe;AAyD1BC,EAAAA,UAAU,EAAE,EAzDc;AA0D1BC,EAAAA,UAAU,EAAE,IA1Dc;AA2D1BC,EAAAA,YAAY,EAAE,IA3DY;AA4D1BC,EAAAA,eAAe,EAAE,KA5DS;AA6D1BC,EAAAA,YAAY,EAAE,KA7DY;AA8D1BC,EAAAA,aAAa,EAAE,IA9DW;AA+D1BC,EAAAA,eAAe,EAAE,KA/DS;AAgE1BC,EAAAA,YAAY,EAAE,KAhEY;AAiE1BC,EAAAA,aAAa,EAAE,IAjEW;AAkE1BC,EAAAA,iBAAiB,EAAE,KAlEO;AAmE1BC,EAAAA,cAAc,EAAE,KAnEU;AAoE1BC,EAAAA,eAAe,EAAE,IApES;AAqE1BC,EAAAA,gBAAgB,EAAE,KArEQ;AAsE1BC,EAAAA,aAAa,EAAE,KAtEW;AAuE1BC,EAAAA,cAAc,EAAE,IAvEU;AAwE1BC,EAAAA,cAAc,EAAE,KAxEU;AAyE1BC,EAAAA,WAAW,EAAE,KAzEa;AA0E1BC,EAAAA,YAAY,EAAE,IA1EY;AA2E1BC,EAAAA,iBAAiB,EAAE,KA3EO;AA4E1BC,EAAAA,cAAc,EAAE,KA5EU;AA6E1BC,EAAAA,eAAe,EAAE,IA7ES;AA8E1BC,EAAAA,iBAAiB,EAAE,KA9EO;AA+E1BC,EAAAA,cAAc,EAAE,KA/EU;AAgF1BC,EAAAA,eAAe,EAAE,IAhFS;AAkF1BC,EAAAA,mBAAmB,EAAE,KAlFK;AAmF1BC,EAAAA,gBAAgB,EAAE,KAnFQ;AAoF1BC,EAAAA,iBAAiB,EAAE,IApFO;AAsF1BC,EAAAA,cAAc,EAAE,KAtFU;AAuF1BC,EAAAA,WAAW,EAAE,KAvFa;AAwF1BC,EAAAA,YAAY,EAAE;AAxFY,CAArB;AA2FP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,YAAY,GAAG,cAArB,C,CAAqC;;AAE5C,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,EAAAA;AAFgC,CAAX,CAAhB;AAIP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEL,mBAD6B;AAEnCI,EAAAA;AAFmC,CAAX,CAAnB;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAGjE,YAAT,EAAuBkE,MAAvB,KAAkC;AAChD;AACA;AACA,SAAOnE,OAAO,CAACkE,KAAD,EAASE,KAAD,IAAW;AAC/B,YAAQD,MAAM,CAACJ,IAAf;AACE,WAAK3B,eAAL;AAAsB;AACpBgC,UAAAA,KAAK,CAACtC,cAAN,GAAuB,IAAvB;AACAsC,UAAAA,KAAK,CAACrC,WAAN,GAAoB,KAApB;AACAqC,UAAAA,KAAK,CAACpC,YAAN,GAAqB,IAArB;AACA;AACD;;AACD,WAAKK,eAAL;AAAsB;AACpB+B,UAAAA,KAAK,CAACtC,cAAN,GAAuB,KAAvB;AACAsC,UAAAA,KAAK,CAACrC,WAAN,GAAoB,IAApB;AACAqC,UAAAA,KAAK,CAAClE,SAAN,CAAgBmE,OAAhB,CAAwBF,MAAM,CAACL,IAA/B;AACA;AACD;;AACD,WAAKxB,eAAL;AAAsB;AACpB8B,UAAAA,KAAK,CAACtC,cAAN,GAAuB,KAAvB;AACAsC,UAAAA,KAAK,CAACpC,YAAN,GAAqBmC,MAAM,CAACG,KAA5B;AACA;AACD;AAED;;AACA,WAAK5B,YAAL;AAAmB;AACjB0B,UAAAA,KAAK,CAACjE,UAAN,GAAmBiE,KAAK,CAACjE,UAAN,CAAiBoE,MAAjB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKN,MAAM,CAACL,IAA/C,CAAnB;AACA;AACD;;AAED,WAAKvB,qBAAL;AAA4B;AAC1B6B,UAAAA,KAAK,CAACzC,mBAAN,GAA4B,IAA5B;AACAyC,UAAAA,KAAK,CAACxC,gBAAN,GAAyB,KAAzB;AACAwC,UAAAA,KAAK,CAACvC,iBAAN,GAA0B,IAA1B;AACA;AACD;;AACD,WAAKW,qBAAL;AAA4B;AAC1B4B,UAAAA,KAAK,CAACzC,mBAAN,GAA4B,KAA5B;AACAyC,UAAAA,KAAK,CAACxC,gBAAN,GAAyB,IAAzB;AACAwC,UAAAA,KAAK,CAACjE,UAAN,GAAmBgE,MAAM,CAACL,IAA1B;AACA;AACD;;AACD,WAAKrB,qBAAL;AAA4B;AAC1B2B,UAAAA,KAAK,CAACzC,mBAAN,GAA4B,KAA5B;AACAyC,UAAAA,KAAK,CAACvC,iBAAN,GAA0BsC,MAAM,CAACG,KAAjC;AACA;AACD;;AAED,WAAK3B,iBAAL;AAAwB;AACtByB,UAAAA,KAAK,CAAC9D,eAAN,GAAwB,IAAxB;AACA8D,UAAAA,KAAK,CAAC7D,YAAN,GAAqB,KAArB;AACA6D,UAAAA,KAAK,CAAC5D,aAAN,GAAsB,IAAtB;AACA;AACD;;AACD,WAAKoC,iBAAL;AAAwB;AACtB,gBAAM8B,IAAI,GAAGN,KAAK,CAAClE,SAAN,CAAgByE,IAAhB,CAAsBH,CAAD,IAAOA,CAAC,CAACI,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAAjD,CAAb;AACAH,UAAAA,IAAI,CAACI,MAAL,CAAYC,IAAZ,CAAiB;AAAEH,YAAAA,EAAE,EAAET,MAAM,CAACL,IAAP,CAAYkB;AAAlB,WAAjB;AACAZ,UAAAA,KAAK,CAAC9D,eAAN,GAAwB,KAAxB;AACA8D,UAAAA,KAAK,CAAC7D,YAAN,GAAqB,IAArB;AACA;AACD;;AACD,WAAKsC,iBAAL;AAAwB;AACtBuB,UAAAA,KAAK,CAAC9D,eAAN,GAAwB,KAAxB;AACA8D,UAAAA,KAAK,CAAC5D,aAAN,GAAsB2D,MAAM,CAACG,KAA7B;AACA;AACD;;AAED,WAAKxB,mBAAL;AAA0B;AACxBsB,UAAAA,KAAK,CAACxD,iBAAN,GAA0B,IAA1B;AACAwD,UAAAA,KAAK,CAACvD,cAAN,GAAuB,KAAvB;AACAuD,UAAAA,KAAK,CAACtD,eAAN,GAAwB,IAAxB;AACA;AACD;;AACD,WAAKiC,mBAAL;AAA0B;AACxB,gBAAM2B,IAAI,GAAGN,KAAK,CAAClE,SAAN,CAAgByE,IAAhB,CAAsBH,CAAD,IAAOA,CAAC,CAACI,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAAjD,CAAb;AACAH,UAAAA,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAACI,MAAL,CAAYP,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACI,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYkB,MAA/C,CAAd;AACAZ,UAAAA,KAAK,CAACxD,iBAAN,GAA0B,KAA1B;AACAwD,UAAAA,KAAK,CAACvD,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,WAAKmC,mBAAL;AACEoB,QAAAA,KAAK,CAACxD,iBAAN,GAA0B,KAA1B;AACAwD,QAAAA,KAAK,CAACtD,eAAN,GAAwBqD,MAAM,CAACG,KAA/B;AACA;;AAEF,WAAKrC,iBAAL;AAAwB;AACtBmC,UAAAA,KAAK,CAAC3D,eAAN,GAAwB,IAAxB;AACA2D,UAAAA,KAAK,CAAC1D,YAAN,GAAqB,KAArB;AACA0D,UAAAA,KAAK,CAACzD,aAAN,GAAsB,IAAtB;AACA;AACD;;AACD,WAAKuB,iBAAL;AAAwB;AACtBkC,UAAAA,KAAK,CAAC3D,eAAN,GAAwB,KAAxB;AACA2D,UAAAA,KAAK,CAAC1D,YAAN,GAAqB,IAArB;AACA0D,UAAAA,KAAK,CAAChE,UAAN,GAAmB+D,MAAM,CAACL,IAA1B;AACA;AACD;;AACD,WAAK3B,iBAAL;AAAwB;AACtBiC,UAAAA,KAAK,CAAC3D,eAAN,GAAwB,KAAxB;AACA2D,UAAAA,KAAK,CAACzD,aAAN,GAAsBwD,MAAM,CAACG,KAA7B;AACA;AACD;;AAED,WAAKW,sBAAL;AAA6B;AAC3Bb,UAAAA,KAAK,CAACc,mBAAN,GAA4B,IAA5B;AACAd,UAAAA,KAAK,CAACe,gBAAN,GAAyB,KAAzB;AACAf,UAAAA,KAAK,CAACgB,iBAAN,GAA0B,IAA1B;AACA;AACD;;AACD,WAAKC,sBAAL;AAA6B;AAC3BjB,UAAAA,KAAK,CAACc,mBAAN,GAA4B,KAA5B;AACAd,UAAAA,KAAK,CAACe,gBAAN,GAAyB,IAAzB;AACAf,UAAAA,KAAK,CAACkB,eAAN,GAAwBnB,MAAM,CAACL,IAA/B;AACA;AACD;;AACD,WAAKyB,sBAAL;AAA6B;AAC3BnB,UAAAA,KAAK,CAACc,mBAAN,GAA4B,KAA5B;AACAd,UAAAA,KAAK,CAACgB,iBAAN,GAA0BjB,MAAM,CAACG,KAAjC;AACA;AACD;;AAED,WAAKrB,kBAAL;AAAyB;AACvBmB,UAAAA,KAAK,CAACrD,gBAAN,GAAyB,IAAzB;AACAqD,UAAAA,KAAK,CAACpD,aAAN,GAAsB,KAAtB;AACAoD,UAAAA,KAAK,CAACnD,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,WAAKiC,kBAAL;AAAyB;AACvBkB,UAAAA,KAAK,CAACrD,gBAAN,GAAyB,KAAzB;AACAqD,UAAAA,KAAK,CAACpD,aAAN,GAAsB,IAAtB;AACAoD,UAAAA,KAAK,CAAClE,SAAN,GAAkBkE,KAAK,CAAClE,SAAN,CAAgBsF,MAAhB,CAAuBrB,MAAM,CAACL,IAA9B,CAAlB;AACAM,UAAAA,KAAK,CAAC/D,YAAN,GAAqB8D,MAAM,CAACL,IAAP,CAAY2B,MAAZ,KAAuB,EAA5C;AACA;AACD;;AACD,WAAKtC,kBAAL;AACEiB,QAAAA,KAAK,CAACrD,gBAAN,GAAyB,KAAzB;AACAqD,QAAAA,KAAK,CAACnD,cAAN,GAAuBkD,MAAM,CAACG,KAA9B;AACA;;AAEF,WAAKlB,gBAAL;AAAuB;AACrBgB,UAAAA,KAAK,CAAClD,cAAN,GAAuB,IAAvB;AACAkD,UAAAA,KAAK,CAACjD,WAAN,GAAoB,KAApB;AACAiD,UAAAA,KAAK,CAAChD,YAAN,GAAqB,IAArB;AACA,gBAJqB,CAKrB;AACD;;AACD,WAAKiC,gBAAL;AAAuB;AACrBe,UAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,UAAAA,KAAK,CAACjD,WAAN,GAAoB,IAApB,CAFqB,CAGrB;AACA;;AACAiD,UAAAA,KAAK,CAAClE,SAAN,CAAgBmE,OAAhB,CAAwBF,MAAM,CAACL,IAA/B;AACAM,UAAAA,KAAK,CAACjE,UAAN,GAAmB,EAAnB;AACA,gBAPqB,CAQrB;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAKmD,gBAAL;AACEc,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAAChD,YAAN,GAAqB+C,MAAM,CAACG,KAA5B;AACA;AACF;;AACA,WAAKf,mBAAL;AAA0B;AACxBa,UAAAA,KAAK,CAAC/C,iBAAN,GAA0B,IAA1B;AACA+C,UAAAA,KAAK,CAAC9C,cAAN,GAAuB,KAAvB;AACA8C,UAAAA,KAAK,CAAC7C,eAAN,GAAwB,IAAxB;AACA,gBAJwB,CAKxB;AACD;;AACD,WAAKiC,mBAAL;AAA0B;AACxB;AACAY,UAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,UAAAA,KAAK,CAAC9C,cAAN,GAAuB,IAAvB;AACA8C,UAAAA,KAAK,CAAClE,SAAN,GAAkBkE,KAAK,CAAClE,SAAN,CAAgBqE,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACI,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAAnD,CAAlB;AACA;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AACD,WAAKpB,mBAAL;AACEW,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB,IAAxB;AACA;AACF;;AAEA,WAAKmC,mBAAL;AAA0B;AACxBU,UAAAA,KAAK,CAAC5C,iBAAN,GAA0B,IAA1B;AACA4C,UAAAA,KAAK,CAAC3C,cAAN,GAAuB,KAAvB;AACA2C,UAAAA,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;AACA,gBAJwB,CAKxB;AACD;AAED;;AACA,WAAKiC,mBAAL;AAA0B;AACxB,gBAAMe,IAAI,GAAGN,KAAK,CAAClE,SAAN,CAAgByE,IAAhB,CAAsBH,CAAD,IAAOA,CAAC,CAACI,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAAjD,CAAb;AACAH,UAAAA,IAAI,CAACgB,QAAL,CAAcrB,OAAd,CAAsBF,MAAM,CAACL,IAA7B;AACAM,UAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,UAAAA,KAAK,CAAC3C,cAAN,GAAuB,IAAvB;AACA,gBALwB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAKmC,mBAAL;AACEQ,QAAAA,KAAK,CAACuB,iBAAN,GAA0B,KAA1B;AACAvB,QAAAA,KAAK,CAAC1C,eAAN,GAAwByC,MAAM,CAACG,KAA/B;AACA;AACF;;AAEA;AAAS;AACP,gBADO,CAEP;AACD;AAnOH;AAqOD,GAtOa,CAAd;AAuOD,CA1OD;;AA4OA,eAAeL,OAAf","sourcesContent":["// import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\n// import faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  /*\r\n  // mainPosts: [\r\n  //   // {\r\n  //   //   id: 1,\r\n  //   //   User: {\r\n  //   //     id: 1,\r\n  //   //     nickname: \"Kevin\",\r\n  //   //   },\r\n  //   //   content: \"First Post #HashTag, #Express\",\r\n  //   //   // Images: [\r\n  //   //   //   {\r\n  //   //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n  //   //   //   },\r\n  //   //   // ],\r\n  //   //   Images: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n  //   //     },\r\n  //   //   ],\r\n  //   //   Comments: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"nero\",\r\n  //   //       },\r\n  //   //       content: \"Great post!\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"jaehan\",\r\n  //   //       },\r\n  //   //       content: `it's really educational`,\r\n  //   //     },\r\n  //   //   ],\r\n  //   // },\r\n  // ],\r\n  */\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  singlePost: null,\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\n/*\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n    */\r\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\"; //Remove Image경우 하나만 만들면 됨(동기이기 때문에). 만약 서버에서도 빼주고 싶다면 보통 다른 것들과 같이 request,success,failure 다 해줘야 함. image의 경우 서버에서 가지고 있는게 더 이득이기때문에 프론트에서만 지워주는 경우가 많암. (지금은 프론트에서만 지우기때문에 request,success,failure등이 필요 없음)\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n/*\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n*/\r\n\r\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\r\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case RETWEET_REQUEST: {\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      }\r\n      case RETWEET_SUCCESS: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      }\r\n\r\n      // 아래가 request, success, failure가 아닌 remove_image 하나인 이유는 동기 함수이기 때문. (back-end에서 요청을 기다려서 받는게 아닌 그냥 front-end측에서만 지우고, backend에서는 사진을 남겨 둠.)\r\n      case REMOVE_IMAGE: {\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      }\r\n\r\n      case UPLOAD_IMAGES_REQUEST: {\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        draft.imagePaths = action.data;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE: {\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      }\r\n\r\n      case LIKE_POST_REQUEST: {\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      }\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE: {\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      }\r\n\r\n      case UNLIKE_POST_REQUEST: {\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POST_REQUEST: {\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      }\r\n      case LOAD_POST_SUCCESS: {\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.singlePost = action.data;\r\n        break;\r\n      }\r\n      case LOAD_POST_FAILURE: {\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      }\r\n\r\n      case LOAD_USER_POST_REQUEST: {\r\n        draft.loadUserPostLoading = true;\r\n        draft.loadUserPostDone = false;\r\n        draft.loadUserPostError = null;\r\n        break;\r\n      }\r\n      case LOAD_USER_POST_SUCCESS: {\r\n        draft.loadUserPostLoading = false;\r\n        draft.loadUserPostDone = true;\r\n        draft.singleUSER_Post = action.data;\r\n        break;\r\n      }\r\n      case LOAD_USER_POST_FAILURE: {\r\n        draft.loadUserPostLoading = false;\r\n        draft.loadUserPostError = action.error;\r\n        break;\r\n      }\r\n\r\n      case LOAD_POSTS_REQUEST: {\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      }\r\n      case LOAD_POSTS_SUCCESS: {\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePosts = action.data.length === 10;\r\n        break;\r\n      }\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST: {\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; // 이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\r\n        // draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        break;\r\n        // action.data.content, postId, userId;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        //   addPostLoading: false,\r\n        //   addPostDone: true,\r\n        // };\r\n      }\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return { ...state, addPostLoading: false, addPostError: action.error };\r\n      case REMOVE_POST_REQUEST: {\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n        // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        // action.data.content, postId, userId;\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n        break;\r\n        /*\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n        //   removePostLoading: false,\r\n        //   removePostDone: true,\r\n        // };\r\n        */\r\n      }\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = true;\r\n        break;\r\n      // return { ...state, removePostLoading: false, removePostError: action.error };\r\n\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n        // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\r\n      }\r\n\r\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCoomentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\r\n\r\n      default: {\r\n        break;\r\n        // return { ...state };\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}