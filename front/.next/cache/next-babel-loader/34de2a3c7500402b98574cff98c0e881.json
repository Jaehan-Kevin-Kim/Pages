{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork } from \"redux-saga/effects\";\nimport postSaga from \"./postSaga\";\nimport userSaga from \"./userSaga\";\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(postSaga), fork(userSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // function logInAPI(data) {\n//   return axios.post(\"/api/login\", data);\n// }\n// // const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\n// // l.next();\n// // l.next();\n// function* logIn(action) {\n//   //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\n//   //put은 dispatch라고 생각하기\n//   try {\n//     // const result = yield call(logInAPI, action.data);\n//     yield delay(1000);\n//     yield put({\n//       type: \"LOG_IN_SUCCESS\",\n//       data: result.data,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: \"LOG_IN_FAILURE\",\n//       data: err.response.data,\n//     });\n//   }\n// }\n// function logOutAPI() {\n//   return axios.post(\"/api/logout\");\n// }\n// function* logOut() {\n//   try {\n//     // const result = yield call(logOutAPI);\n//     yield delay(1000);\n//     yield put({\n//       type: \"LOG_OUT_SUCCESS\",\n//       data: result.data,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: \"LOG_OUT_FAILURE\",\n//       data: err.response.data,\n//     });\n//   }\n// }\n// function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n// function* addPost(action) {\n//   try {\n//     // const result = yield call(addPostAPI, action.data);\n//     yield delay(1000);\n//     yield put({\n//       type: \"ADD_POST_SUCCESS\",\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: \"LOG_OUT_FAILURE\",\n//       data: err.response.data,\n//     });\n//   }\n// }\n//take는 뒤에 action이 실행 될때까지 기다리겠다는 뜻 (take('LOG_IN', login)) => 'LOG_IN'(action)이 실행 될때 까지 기다리고, 실행 되면 뒤에 logIn function을 실행 함.\n// event listener 같은 역할을 하지만 치명적인 단점은 1회용임. (한번 실행되고 나면 해당 event listner가 사라짐. 따라서 while로 감싸주거나 takeEvery로 받아 줘야 함.) => takeLatest로 쓸 수도 있는데 이건, 실수로 두번누르거나 했을때 마지막꺼만 인식해서 처리해 줌.\n// function* watchLogin() {\n//   yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n// }\n// function* watchLogOut() {\n//   yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n// }\n// function* watchAddPost() {\n//   yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n// }\n// export default function* rootSaga() {\n//   //ALL을 하면 배열안의 모든 것들을 한번에 다 실행 함.\n//   //fork는 함수를 실행한다는 뜻 .\n//   //fork대신 call을 쓰는 경우도 있음. 하지만 두개의 차이점 정확히 알기.\n//   //ㄴ FORK는 비동기 함수 호출 / call은 동기 함수 호출\n//   // yield는 await과 비슷함.\n//   yield all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\n// }","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/index.js"],"names":["rootSaga","all","fork","postSaga","userSaga"],"mappings":";;oDAIyBA,Q;;AAJzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,SAAUJ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACC,QAAD,CAAL,EAAiBD,IAAI,CAACE,QAAD,CAArB,CAAD,CAAT;;AANa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CASf;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork } from \"redux-saga/effects\";\r\nimport postSaga from \"./postSaga\";\r\nimport userSaga from \"./userSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  //ALL을 하면 배열안의 모든 것들을 한번에 다 실행 함.\r\n  //fork는 함수를 실행한다는 뜻 .\r\n  //fork대신 call을 쓰는 경우도 있음. 하지만 두개의 차이점 정확히 알기.\r\n  //ㄴ FORK는 비동기 함수 호출 / call은 동기 함수 호출\r\n  // yield는 await과 비슷함.\r\n  yield all([fork(postSaga), fork(userSaga)]);\r\n}\r\n\r\n// function logInAPI(data) {\r\n//   return axios.post(\"/api/login\", data);\r\n// }\r\n\r\n// // const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\r\n// // l.next();\r\n// // l.next();\r\n\r\n// function* logIn(action) {\r\n//   //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\r\n//   //put은 dispatch라고 생각하기\r\n//   try {\r\n//     // const result = yield call(logInAPI, action.data);\r\n//     yield delay(1000);\r\n//     yield put({\r\n//       type: \"LOG_IN_SUCCESS\",\r\n//       data: result.data,\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: \"LOG_IN_FAILURE\",\r\n//       data: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function logOutAPI() {\r\n//   return axios.post(\"/api/logout\");\r\n// }\r\n\r\n// function* logOut() {\r\n//   try {\r\n//     // const result = yield call(logOutAPI);\r\n//     yield delay(1000);\r\n//     yield put({\r\n//       type: \"LOG_OUT_SUCCESS\",\r\n//       data: result.data,\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: \"LOG_OUT_FAILURE\",\r\n//       data: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\n\r\n// function* addPost(action) {\r\n//   try {\r\n//     // const result = yield call(addPostAPI, action.data);\r\n//     yield delay(1000);\r\n//     yield put({\r\n//       type: \"ADD_POST_SUCCESS\",\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: \"LOG_OUT_FAILURE\",\r\n//       data: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n//take는 뒤에 action이 실행 될때까지 기다리겠다는 뜻 (take('LOG_IN', login)) => 'LOG_IN'(action)이 실행 될때 까지 기다리고, 실행 되면 뒤에 logIn function을 실행 함.\r\n// event listener 같은 역할을 하지만 치명적인 단점은 1회용임. (한번 실행되고 나면 해당 event listner가 사라짐. 따라서 while로 감싸주거나 takeEvery로 받아 줘야 함.) => takeLatest로 쓸 수도 있는데 이건, 실수로 두번누르거나 했을때 마지막꺼만 인식해서 처리해 줌.\r\n// function* watchLogin() {\r\n//   yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n// }\r\n\r\n// function* watchLogOut() {\r\n//   yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n// }\r\n// function* watchAddPost() {\r\n//   yield takeLatest(\"ADD_POST_REQUEST\", addPost);\r\n// }\r\n\r\n// export default function* rootSaga() {\r\n//   //ALL을 하면 배열안의 모든 것들을 한번에 다 실행 함.\r\n//   //fork는 함수를 실행한다는 뜻 .\r\n//   //fork대신 call을 쓰는 경우도 있음. 하지만 두개의 차이점 정확히 알기.\r\n//   //ㄴ FORK는 비동기 함수 호출 / call은 동기 함수 호출\r\n//   // yield는 await과 비슷함.\r\n//   yield all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}