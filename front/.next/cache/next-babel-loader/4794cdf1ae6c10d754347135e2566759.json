{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"Kevin\"\n    },\n    content: \"First Post #HashTag, #Express\",\n    // Images: [\n    //   {\n    //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\n    //   },\n    //   {\n    //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\n    //   },\n    //   {\n    //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\n    //   },\n    // ],\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"Great post!\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"jaehan\"\n      },\n      content: `it's really educational`\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  Content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: []\n})));\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"Kevin\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"Kevin\"\n  }\n}); //reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        {\n          draft.addPostLoading = true;\n          draft.addPostDone = false;\n          draft.addPostError = null;\n          break; // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = true; // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; //이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\n\n          draft.mainPosts.unshift(dummyPost(action.data));\n          break; // action.data.content, postId, userId;\n          // return {\n          //   ...state,\n          //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          //   addPostLoading: false,\n          //   addPostDone: true,\n          // };\n        }\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return { ...state, addPostLoading: false, addPostError: action.error };\n\n      case REMOVE_POST_REQUEST:\n        {\n          draft.removePostLoading = true;\n          draft.removePostDone = false;\n          draft.removePostError = null;\n          break; // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          // action.data.content, postId, userId;\n          draft.removePostLoading = false;\n          draft.removePostDone = true;\n          draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n          break; // return {\n          //   ...state,\n          //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n          //   removePostLoading: false,\n          //   removePostDone: true,\n          // };\n        }\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n      // return { ...state, removePostLoading: false, removePostError: action.error };\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.addCommentLoading = true;\n          draft.addCommentDone = false;\n          draft.addCommentError = null;\n          break; // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\n        }\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addcommentDone = true;\n          break; //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCoomentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\n\n      default:\n        {\n          break; // return { ...state };\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","v","i","name","findName","Content","lorem","paragraph","image","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","post","find","postId","addcommentDone","addCoomentLoading"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"Kevin\",\r\n      },\r\n      content: \"First Post #HashTag, #Express\",\r\n      // Images: [\r\n      //   {\r\n      //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n      //   },\r\n      //   {\r\n      //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n      //   },\r\n      //   {\r\n      //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n      //   },\r\n      // ],\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"Great post!\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"jaehan\",\r\n          },\r\n          content: `it's really educational`,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\ninitialState.mainPosts.concat(\r\n  Array(20)\r\n    .fill()\r\n    .map((v, i) => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      Content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n\r\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\r\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST: {\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; //이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n        // action.data.content, postId, userId;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        //   addPostLoading: false,\r\n        //   addPostDone: true,\r\n        // };\r\n      }\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return { ...state, addPostLoading: false, addPostError: action.error };\r\n      case REMOVE_POST_REQUEST: {\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n        // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        // action.data.content, postId, userId;\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n        //   removePostLoading: false,\r\n        //   removePostDone: true,\r\n        // };\r\n      }\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = true;\r\n        break;\r\n      // return { ...state, removePostLoading: false, removePostError: action.error };\r\n\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n        // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\r\n      }\r\n\r\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addcommentDone = true;\r\n        break;\r\n        //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCoomentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\r\n\r\n      default: {\r\n        break;\r\n        // return { ...state };\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}