{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  // mainPosts: [\n  //   // {\n  //   //   id: 1,\n  //   //   User: {\n  //   //     id: 1,\n  //   //     nickname: \"Kevin\",\n  //   //   },\n  //   //   content: \"First Post #HashTag, #Express\",\n  //   //   // Images: [\n  //   //   //   {\n  //   //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\n  //   //   //   },\n  //   //   //   {\n  //   //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\n  //   //   //   },\n  //   //   //   {\n  //   //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\n  //   //   //   },\n  //   //   // ],\n  //   //   Images: [\n  //   //     {\n  //   //       id: shortId.generate(),\n  //   //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\n  //   //     },\n  //   //     {\n  //   //       id: shortId.generate(),\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\n  //   //     },\n  //   //     {\n  //   //       id: shortId.generate(),\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\n  //   //     },\n  //   //   ],\n  //   //   Comments: [\n  //   //     {\n  //   //       id: shortId.generate(),\n  //   //       User: {\n  //   //         id: shortId.generate(),\n  //   //         nickname: \"nero\",\n  //   //       },\n  //   //       content: \"Great post!\",\n  //   //     },\n  //   //     {\n  //   //       id: shortId.generate(),\n  //   //       User: {\n  //   //         id: shortId.generate(),\n  //   //         nickname: \"jaehan\",\n  //   //       },\n  //   //       content: `it's really educational`,\n  //   //     },\n  //   //   ],\n  //   // },\n  // ],\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => {\n  Array(number).fill().map(() => ({\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  }));\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"Kevin\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"Kevin\"\n  }\n}); //reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        {\n          draft.addPostLoading = true;\n          draft.addPostDone = false;\n          draft.addPostError = null;\n          break; // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = true; // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; //이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\n\n          draft.mainPosts.unshift(dummyPost(action.data));\n          break; // action.data.content, postId, userId;\n          // return {\n          //   ...state,\n          //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          //   addPostLoading: false,\n          //   addPostDone: true,\n          // };\n        }\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return { ...state, addPostLoading: false, addPostError: action.error };\n\n      case REMOVE_POST_REQUEST:\n        {\n          draft.removePostLoading = true;\n          draft.removePostDone = false;\n          draft.removePostError = null;\n          break; // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          // action.data.content, postId, userId;\n          draft.removePostLoading = false;\n          draft.removePostDone = true;\n          draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n          break; // return {\n          //   ...state,\n          //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n          //   removePostLoading: false,\n          //   removePostDone: true,\n          // };\n        }\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n      // return { ...state, removePostLoading: false, removePostError: action.error };\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.addCommentLoading = true;\n          draft.addCommentDone = false;\n          draft.addCommentError = null;\n          break; // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\n        }\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addcommentDone = true;\n          break; //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCoomentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\n\n      default:\n        {\n          break; // return { ...state };\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId","addcommentDone","addCoomentLoading"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  // mainPosts: [\r\n  //   // {\r\n  //   //   id: 1,\r\n  //   //   User: {\r\n  //   //     id: 1,\r\n  //   //     nickname: \"Kevin\",\r\n  //   //   },\r\n  //   //   content: \"First Post #HashTag, #Express\",\r\n  //   //   // Images: [\r\n  //   //   //   {\r\n  //   //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n  //   //   //   },\r\n  //   //   // ],\r\n  //   //   Images: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n  //   //     },\r\n  //   //   ],\r\n  //   //   Comments: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"nero\",\r\n  //   //       },\r\n  //   //       content: \"Great post!\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"jaehan\",\r\n  //   //       },\r\n  //   //       content: `it's really educational`,\r\n  //   //     },\r\n  //   //   ],\r\n  //   // },\r\n  // ],\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => {\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n};\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n\r\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\r\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST: {\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; //이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n        // action.data.content, postId, userId;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        //   addPostLoading: false,\r\n        //   addPostDone: true,\r\n        // };\r\n      }\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return { ...state, addPostLoading: false, addPostError: action.error };\r\n      case REMOVE_POST_REQUEST: {\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n        // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        // action.data.content, postId, userId;\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n        //   removePostLoading: false,\r\n        //   removePostDone: true,\r\n        // };\r\n      }\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = true;\r\n        break;\r\n      // return { ...state, removePostLoading: false, removePostError: action.error };\r\n\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n        // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\r\n      }\r\n\r\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addcommentDone = true;\r\n        break;\r\n        //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCoomentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\r\n\r\n      default: {\r\n        break;\r\n        // return { ...state };\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}