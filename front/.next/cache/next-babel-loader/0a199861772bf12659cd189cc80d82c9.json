{"ast":null,"code":"var _jsxFileName = \"F:\\\\Self Study_Coding\\\\Web\\\\Portfolio\\\\React_NodeBird\\\\preapre_second\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY,\r\n        document.documentElement.clientHeight,\r\n        document.documentElement.scrollHeight\r\n      );\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    //useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  console.log(\"mainPosts\", mainPosts);\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        // console.log(post)\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n*/\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    // console.log(\"rerender\");\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  /*\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n  */\n\n  useEffect(function () {\n    function onScroll() {\n      // console.log(\n      //   //scrollY: 현재 내가 얼마나 내렸는지 (스크롤내리고 올릴때마다 변함) : pageYOffset\n      //   //clientHeight: 현재 화면에서 보이는 길이 (창 크기가 바뀌면 달라짐)\n      //   //scrollHeight: 총 scroll 길이\n      //   typeof window.scrollY,\n      //   typeof document.documentElement.clientHeight,\n      //   typeof (document.documentElement.scrollHeight - 300)\n      // );\n      // console.log(\n      //   window.scrollY + document.documentElement.clientHeight >\n      //     document.documentElement.scrollHeight - 300\n      // );\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          console.log(\"lastId\", lastId);\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll); // useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\n\n    return function () {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 14\n    }, _this), mainPosts.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Home, \"djuFENDcsI0GwSBhrXT69nwI2y0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/pages/index.js"],"names":["useEffect","useDispatch","useSelector","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","retweetError","alert","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","console","log","type","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport wrapper from \"../store/configureStore\";\r\nimport { END } from \"redux-saga\";\r\n\r\n/*\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY,\r\n        document.documentElement.clientHeight,\r\n        document.documentElement.scrollHeight\r\n      );\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    //useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  console.log(\"mainPosts\", mainPosts);\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        // console.log(post)\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n*/\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector(\r\n    (state) => state.post\r\n  );\r\n\r\n  useEffect(() => {\r\n    // console.log(\"rerender\");\r\n    if (retweetError) {\r\n      alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  /*\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n*/\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // console.log(\r\n      //   //scrollY: 현재 내가 얼마나 내렸는지 (스크롤내리고 올릴때마다 변함) : pageYOffset\r\n      //   //clientHeight: 현재 화면에서 보이는 길이 (창 크기가 바뀌면 달라짐)\r\n      //   //scrollHeight: 총 scroll 길이\r\n      //   typeof window.scrollY,\r\n      //   typeof document.documentElement.clientHeight,\r\n      //   typeof (document.documentElement.scrollHeight - 300)\r\n      // );\r\n\r\n      // console.log(\r\n      //   window.scrollY + document.documentElement.clientHeight >\r\n      //     document.documentElement.scrollHeight - 300\r\n      // );\r\n      if (\r\n        window.pageYOffset + document.documentElement.clientHeight >\r\n        document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          console.log(\"lastId\", lastId);\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    // useEffect에서 window.addEventListener할때 주의 할점: 항상 return으로 removeEventListener를 해줘야 함. 그러지 않으면 Memory에 계속 쌓여서 메모리 누수가 발생 함.\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(\"context\", context);\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}