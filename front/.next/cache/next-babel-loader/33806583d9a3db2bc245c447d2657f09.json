{"ast":null,"code":"// import React from \"react\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers/index\";\nimport rootSaga from \"../sagas\";\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      // if (typeof action === \"function\") {\n      //   return action(dispatch, getState);\n      // }\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = true ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); //위 설명: 개발용 middleware랑 배포용 middleware는 다르기 때문에 위와 같이 정의 함.\n\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // store.dispatch({\n  //   type: \"CHANGE_NICKNAME\",\n  //   data: \"Jaehan\",\n  // });\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: false\n}); //위와 같이 하면 redux 사용시 문제점등이 더 자세히 나옴. 따라서 위와 같이 설정 하기\n\nexport default wrapper;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA;AAEA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,gBAAgB,GACpB,SADIA,gBACJ;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SACA,UAACC,IAAD;AAAA,WACA,UAACC,MAAD,EAAY;AACV;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KAPD;AAAA,GADA;AAAA,CADF;;AAWA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,MAAMU,QAAQ,GACZ,OACIf,OAAO,CAACD,eAAe,MAAf,SAAmBe,WAAnB,CAAD,CADX,GAEIb,mBAAmB,CAACF,eAAe,MAAf,SAAmBe,WAAnB,CAAD,CAHzB,CAH2B,CAO3B;;AAEA,MAAME,KAAK,GAAGlB,WAAW,CAACK,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB,CAV2B,CAW3B;AACA;AACA;AACA;;AACA,SAAOY,KAAP;AACD,CAhBD;;AAkBA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B,C,CACA;;AAEA,eAAeD,OAAf","sourcesContent":["// import React from \"react\";\r\n\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport reducer from \"../reducers/index\";\r\nimport rootSaga from \"../sagas\";\r\n\r\nconst loggerMiddleware =\r\n  ({ dispatch, getState }) =>\r\n  (next) =>\r\n  (action) => {\r\n    // if (typeof action === \"function\") {\r\n    //   return action(dispatch, getState);\r\n    // }\r\n    console.log(action);\r\n    return next(action);\r\n  };\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  //위 설명: 개발용 middleware랑 배포용 middleware는 다르기 때문에 위와 같이 정의 함.\r\n\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  // store.dispatch({\r\n  //   type: \"CHANGE_NICKNAME\",\r\n  //   data: \"Jaehan\",\r\n  // });\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\" });\r\n//위와 같이 하면 redux 사용시 문제점등이 더 자세히 나옴. 따라서 위와 같이 설정 하기\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}