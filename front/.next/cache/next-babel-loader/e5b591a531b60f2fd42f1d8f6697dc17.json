{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, delay, takeLatest, put, throttle, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    console.log(\"loadPosts in Saga\"); // const result = yield call(loadPostsAPI, action.data);\n\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); // yield delay(1000);\n    // const id = shortId.generate();\n    // 아래는 post reducer 조작 부분\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data // data: {\n      //   id,\n      //   content: action.data,\n      // },\n\n    }); // 아래는 user reducer 조작 부분\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000); // 아래는 post reducer 조작 부분\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // 아래는 user reducer 조작 부분\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  //POST /post/1/comment\n  return axios.post(\"/post/${data.postId}/comment\", data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","throttle","call","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","console","log","type","err","error","response","addPostAPI","post","content","addPost","result","id","removePostAPI","delete","removePost","addCommentAPI","addComment","watchLoadPosts","watchAddComment","watchRemovePost","watchAddPost","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, fork, delay, takeLatest, put, throttle, call } from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    console.log(\"loadPosts in Saga\");\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    // yield delay(1000);\r\n    // const id = shortId.generate();\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n      // data: {\r\n      //   id,\r\n      //   content: action.data,\r\n      // },\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  //POST /post/1/comment\r\n  return axios.post(\"/post/${data.postId}/comment\", data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}