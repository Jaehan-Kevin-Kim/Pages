{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, delay, takeLatest, put } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate(); // 아래는 post reducer 조작 부분\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    }); // 아래는 user reducer 조작 부분\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000); // 아래는 post reducer 조작 부분\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // 아래는 user reducer 조작 부분\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${id}/comment;'\", data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","console","error","response","watchLoadPosts","addPostAPI","post","addPost","id","generate","content","watchAddPost","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, fork, delay, takeLatest, put } from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/post/${id}/comment;'\", data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}