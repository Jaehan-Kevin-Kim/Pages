{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate(); // 아래는 post reducer 조작 부분\n\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate(); // 아래는 post reducer 조작 부분\n\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: id\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${id}/comment;'\", data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/post.js"],"names":["addPost","watchAddPost","removePost","watchRemovePost","addComment","watchAddComment","postSaga","axios","all","fork","delay","takeLatest","put","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_REQUEST","ADD_POST_TO_ME","addPostAPI","data","post","action","id","generate","type","content","response","removePostAPI","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","REMOVE_POST_FAILURE","addCommentAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  REMOVE_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/post/${id}/comment;'\", data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}