{"ast":null,"code":"import { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport moment from \"moment\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nimport Link from \"next/link\"; // moment.locale(\"ko\");\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  // const [liked, setLiked] = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user); // const id = me && me.id;\n\n  const id = me === null || me === void 0 ? void 0 : me.id; // (위 me && me.id 와 같은 문법이지만 훨씬 짧은 새로운 문법)\n\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"You need to sign in.\");\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n    /*\r\n    setLiked((prev) => true);\r\n    //참을 거짓으로, 거짓을 참으로 toggle로 바꿀때는 위와 같이 작성\r\n    */\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert(\"You need to sign in.\");\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"You need to sign in.\");\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"You need to sign in.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  console.log(\"post\", post);\n  const liked = post.Likers.find(v => v.id === id);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsx(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/_jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"red\",\n        onClick: onUnlike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\"), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"Modify\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              onClick: onRemovePost,\n              loading: removePostLoading,\n              children: \"Delete\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"Report\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"more\")],\n      title: post.RetweetId ? `Retweet by ${post.User.nickname}` : null,\n      extra: id && /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            float: \"right\"\n          },\n          children: moment(post.createdAt).format(\"YYYY.MM.DD\")\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            float: \"right\"\n          },\n          children: moment(post.createdAt).fromNow()\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: `${post.Comments.length}'s comments`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsx(Link, {\n              href: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsx(\"a\", {\n                children: /*#__PURE__*/_jsx(Avatar, {\n                  children: item.User.nickname[0]\n                })\n              })\n            }),\n            content: item.content\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default PostCard;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/components/PostCard.js"],"names":["Avatar","Button","Card","Comment","List","Popover","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","React","useCallback","useEffect","useState","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","moment","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","Link","PostCard","post","commentFormOpened","setCommentFormOpened","dispatch","removePostLoading","state","me","user","id","onLike","alert","type","data","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","console","log","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","fromNow","Comments","length","item"],"mappings":"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","sourcesContent":["import { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\r\nimport {\r\n  RetweetOutlined,\r\n  HeartOutlined,\r\n  MessageOutlined,\r\n  EllipsisOutlined,\r\n  HeartTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostCardContent from \"./PostCardContent\";\r\nimport moment from \"moment\";\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  REMOVE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  RETWEET_REQUEST,\r\n} from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\nimport Link from \"next/link\";\r\n\r\n// moment.locale(\"ko\");\r\n\r\nconst PostCard = ({ post }) => {\r\n  // const [liked, setLiked] = useState(false);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading } = useSelector((state) => state.post);\r\n\r\n  const { me } = useSelector((state) => state.user);\r\n  // const id = me && me.id;\r\n  const id = me?.id;\r\n  // (위 me && me.id 와 같은 문법이지만 훨씬 짧은 새로운 문법)\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"You need to sign in.\");\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n    /*\r\n    setLiked((prev) => true);\r\n    //참을 거짓으로, 거짓을 참으로 toggle로 바꿀때는 위와 같이 작성\r\n    */\r\n  }, [id]);\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"You need to sign in.\");\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"You need to sign in.\");\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, []);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"You need to sign in.\");\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  console.log(\"post\", post);\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked ? (\r\n            <HeartTwoTone twoToneColor=\"red\" key=\"heart\" onClick={onUnlike} />\r\n          ) : (\r\n            <HeartOutlined key=\"heart\" onClick={onLike} />\r\n          ),\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={\r\n              <Button.Group>\r\n                {id && post.User.id === id ? (\r\n                  <>\r\n                    <Button>Modify</Button>\r\n                    <Button type=\"danger\" onClick={onRemovePost} loading={removePostLoading}>\r\n                      Delete\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <Button>Report</Button>\r\n                )}\r\n              </Button.Group>\r\n            }>\r\n            <EllipsisOutlined />\r\n            {/* ... */}\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `Retweet by ${post.User.nickname}` : null}\r\n        extra={id && <FollowButton post={post} />}>\r\n        {post.RetweetId && post.Retweet ? (\r\n          <Card cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\r\n            <div style={{ float: \"right\" }}>{moment(post.createdAt).format(\"YYYY.MM.DD\")}</div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.Retweet.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.Retweet.User.nickname}\r\n              description={<PostCardContent postData={post.Retweet.content} />}\r\n            />\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            <div style={{ float: \"right\" }}>{moment(post.createdAt).fromNow()}</div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />}\r\n            />\r\n          </>\r\n        )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}'s comments`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link href={`/user/${item.User.id}`}>\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n      {/* <CommentForm />\r\n      <Comments /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comment: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}