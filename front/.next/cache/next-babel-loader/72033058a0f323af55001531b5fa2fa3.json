{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n} // const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\n// l.next();\n// l.next();\n\n\nfunction* logIn(action) {\n  //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\n  //put은 dispatch라고 생각하기\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/user.js"],"names":["axios","all","fork","put","takeLatest","delay","logInAPI","data","post","logIn","action","type","result","err","response","logOutAPI","logOut","watchLogin","watchLogOut","userSaga","watchLogIn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD,C,CAED;AACA;AACA;;;AAEA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB;AACA;AACA,MAAI;AACF;AACA,UAAML,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOf,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,iBADE;AAERJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,iBADE;AAERJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,UAAV,GAAuB;AACrB,QAAMb,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACD;;AAED,UAAUS,WAAV,GAAwB;AACtB,QAAMd,UAAU,CAAC,iBAAD,EAAoBY,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMlB,GAAG,CAAC,CAACC,IAAI,CAACkB,UAAD,CAAL,EAAmBlB,IAAI,CAACgB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\r\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'jhkevin21@gmail.com'}})\r\n// l.next();\r\n// l.next();\r\n\r\nfunction* logIn(action) {\r\n  //성공 결과는 result.data에, 실패경과는 err.response.data에 담겨있음\r\n  //put은 dispatch라고 생각하기\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}