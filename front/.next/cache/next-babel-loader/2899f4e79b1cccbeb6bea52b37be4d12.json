{"ast":null,"code":"// import shortId from \"shortid\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport var initialState = {\n  /*\r\n  // mainPosts: [\r\n  //   // {\r\n  //   //   id: 1,\r\n  //   //   User: {\r\n  //   //     id: 1,\r\n  //   //     nickname: \"Kevin\",\r\n  //   //   },\r\n  //   //   content: \"First Post #HashTag, #Express\",\r\n  //   //   // Images: [\r\n  //   //   //   {\r\n  //   //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n  //   //   //   },\r\n  //   //   // ],\r\n  //   //   Images: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n  //   //     },\r\n  //   //   ],\r\n  //   //   Comments: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"nero\",\r\n  //   //       },\r\n  //   //       content: \"Great post!\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"jaehan\",\r\n  //   //       },\r\n  //   //       content: `it's really educational`,\r\n  //   //     },\r\n  //   //   ],\r\n  //   // },\r\n  // ],\r\n  */\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\n/*\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n    */\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n/*\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n*/\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LIKE_POST_REQUEST:\n        {\n          draft.likePostLoading = true;\n          draft.likePostDone = false;\n          draft.likePostError = null;\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          draft.likePostLoading = false;\n          draft.likePostError = action.error;\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          draft.unlikePostLoading = true;\n          draft.unlikePostDone = false;\n          draft.unlikePostError = null;\n          break;\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        {\n          draft.loadPostsLoading = true;\n          draft.loadPostsDone = false;\n          draft.loadPostsError = null;\n          break;\n        }\n\n      case LOAD_POSTS_SUCCESS:\n        {\n          draft.loadPostsLoading = false;\n          draft.loadPostsDone = true;\n          draft.mainPosts = action.data.concat(draft.mainPosts);\n          draft.hasMorePosts = draft.mainPosts.length < 50;\n          break;\n        }\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        {\n          draft.addPostLoading = true;\n          draft.addPostDone = false;\n          draft.addPostError = null;\n          break; // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = true; // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; // 이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\n          // draft.mainPosts.unshift(dummyPost(action.data));\n\n          draft.mainPosts.unshift(action.data);\n          break; // action.data.content, postId, userId;\n          // return {\n          //   ...state,\n          //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          //   addPostLoading: false,\n          //   addPostDone: true,\n          // };\n        }\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return { ...state, addPostLoading: false, addPostError: action.error };\n\n      case REMOVE_POST_REQUEST:\n        {\n          draft.removePostLoading = true;\n          draft.removePostDone = false;\n          draft.removePostError = null;\n          break; // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          // action.data.content, postId, userId;\n          draft.removePostLoading = false;\n          draft.removePostDone = true;\n          draft.mainPosts = draft.mainPosts.filter(function (v) {\n            return v.id !== action.data.PostId;\n          });\n          break;\n          /*\r\n          // return {\r\n          //   ...state,\r\n          //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n          //   removePostLoading: false,\r\n          //   removePostDone: true,\r\n          // };\r\n          */\n        }\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n      // return { ...state, removePostLoading: false, removePostError: action.error };\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.addCommentLoading = true;\n          draft.addCommentDone = false;\n          draft.addCommentError = null;\n          break; // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\n        }\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCoomentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\n\n      default:\n        {\n          break; // return { ...state };\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","post","find","v","id","PostId","Likers","push","UserId","error","filter","concat","length","unshift","Comments","addCoomentLoading"],"mappings":"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","sourcesContent":["// import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\n// import faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  /*\r\n  // mainPosts: [\r\n  //   // {\r\n  //   //   id: 1,\r\n  //   //   User: {\r\n  //   //     id: 1,\r\n  //   //     nickname: \"Kevin\",\r\n  //   //   },\r\n  //   //   content: \"First Post #HashTag, #Express\",\r\n  //   //   // Images: [\r\n  //   //   //   {\r\n  //   //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n  //   //   //   },\r\n  //   //   //   {\r\n  //   //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n  //   //   //   },\r\n  //   //   // ],\r\n  //   //   Images: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n  //   //     },\r\n  //   //   ],\r\n  //   //   Comments: [\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"nero\",\r\n  //   //       },\r\n  //   //       content: \"Great post!\",\r\n  //   //     },\r\n  //   //     {\r\n  //   //       id: shortId.generate(),\r\n  //   //       User: {\r\n  //   //         id: shortId.generate(),\r\n  //   //         nickname: \"jaehan\",\r\n  //   //       },\r\n  //   //       content: `it's really educational`,\r\n  //   //     },\r\n  //   //   ],\r\n  //   // },\r\n  // ],\r\n  */\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n};\r\n\r\n/*\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n    */\r\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n/*\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n*/\r\n\r\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\r\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LIKE_POST_REQUEST: {\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      }\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE: {\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      }\r\n\r\n      case UNLIKE_POST_REQUEST: {\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST: {\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      }\r\n      case LOAD_POSTS_SUCCESS: {\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.hasMorePosts = draft.mainPosts.length < 50;\r\n        break;\r\n      }\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST: {\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; // 이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\r\n        // draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n        // action.data.content, postId, userId;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        //   addPostLoading: false,\r\n        //   addPostDone: true,\r\n        // };\r\n      }\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return { ...state, addPostLoading: false, addPostError: action.error };\r\n      case REMOVE_POST_REQUEST: {\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n        // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        // action.data.content, postId, userId;\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n        break;\r\n        /*\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n        //   removePostLoading: false,\r\n        //   removePostDone: true,\r\n        // };\r\n        */\r\n      }\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = true;\r\n        break;\r\n      // return { ...state, removePostLoading: false, removePostError: action.error };\r\n\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n        // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\r\n      }\r\n\r\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCoomentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\r\n\r\n      default: {\r\n        break;\r\n        // return { ...state };\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}