{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport var initialState = {\n  mainPosts: [// {\n    //   id: 1,\n    //   User: {\n    //     id: 1,\n    //     nickname: \"Kevin\",\n    //   },\n    //   content: \"First Post #HashTag, #Express\",\n    //   // Images: [\n    //   //   {\n    //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\n    //   //   },\n    //   //   {\n    //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\n    //   //   },\n    //   //   {\n    //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\n    //   //   },\n    //   // ],\n    //   Images: [\n    //     {\n    //       id: shortId.generate(),\n    //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\n    //     },\n    //     {\n    //       id: shortId.generate(),\n    //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\n    //     },\n    //     {\n    //       id: shortId.generate(),\n    //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\n    //     },\n    //   ],\n    //   Comments: [\n    //     {\n    //       id: shortId.generate(),\n    //       User: {\n    //         id: shortId.generate(),\n    //         nickname: \"nero\",\n    //       },\n    //       content: \"Great post!\",\n    //     },\n    //     {\n    //       id: shortId.generate(),\n    //       User: {\n    //         id: shortId.generate(),\n    //         nickname: \"jaehan\",\n    //       },\n    //       content: `it's really educational`,\n    //     },\n    //   ],\n    // },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n}));\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"Kevin\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"Kevin\"\n    }\n  };\n}; //reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        {\n          draft.addPostLoading = true;\n          draft.addPostDone = false;\n          draft.addPostError = null;\n          break; // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = true; // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; //이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\n\n          draft.mainPosts.unshift(dummyPost(action.data));\n          break; // action.data.content, postId, userId;\n          // return {\n          //   ...state,\n          //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          //   addPostLoading: false,\n          //   addPostDone: true,\n          // };\n        }\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return { ...state, addPostLoading: false, addPostError: action.error };\n\n      case REMOVE_POST_REQUEST:\n        {\n          draft.removePostLoading = true;\n          draft.removePostDone = false;\n          draft.removePostError = null;\n          break; // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          // action.data.content, postId, userId;\n          draft.removePostLoading = false;\n          draft.removePostDone = true;\n          draft.mainPosts = draft.mainPosts.filter(function (v) {\n            return v.id !== action.data;\n          });\n          break; // return {\n          //   ...state,\n          //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n          //   removePostLoading: false,\n          //   removePostDone: true,\n          // };\n        }\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n      // return { ...state, removePostLoading: false, removePostError: action.error };\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.addCommentLoading = true;\n          draft.addCommentDone = false;\n          draft.addCommentError = null;\n          break; // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\n        }\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addcommentDone = true;\n          break; //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCoomentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\n\n      default:\n        {\n          break; // return { ...state };\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId","addcommentDone","addCoomentLoading"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    // {\r\n    //   id: 1,\r\n    //   User: {\r\n    //     id: 1,\r\n    //     nickname: \"Kevin\",\r\n    //   },\r\n    //   content: \"First Post #HashTag, #Express\",\r\n    //   // Images: [\r\n    //   //   {\r\n    //   //     src: \"https://res.cloudinary.com/highereducation/image/upload/c_scale,w_750/f_auto,fl_lossy,q_auto:eco/v1532988864/TheBestColleges.org/images/study-notebooks.jpg\",\r\n    //   //   },\r\n    //   //   {\r\n    //   //     src: \"https://www.fastweb.com/uploads/article_photo/photo/2161/crop380w_istock_000002193842xsmall-books.jpg\",\r\n    //   //   },\r\n    //   //   {\r\n    //   //     src: \"https://www.insidehighered.com/sites/default/server_files/media/iStock-520374378.jpg\",\r\n    //   //   },\r\n    //   // ],\r\n    //   Images: [\r\n    //     {\r\n    //       id: shortId.generate(),\r\n    //       src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n    //     },\r\n    //     {\r\n    //       id: shortId.generate(),\r\n    //       src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n    //     },\r\n    //     {\r\n    //       id: shortId.generate(),\r\n    //       src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n    //     },\r\n    //   ],\r\n    //   Comments: [\r\n    //     {\r\n    //       id: shortId.generate(),\r\n    //       User: {\r\n    //         id: shortId.generate(),\r\n    //         nickname: \"nero\",\r\n    //       },\r\n    //       content: \"Great post!\",\r\n    //     },\r\n    //     {\r\n    //       id: shortId.generate(),\r\n    //       User: {\r\n    //         id: shortId.generate(),\r\n    //         nickname: \"jaehan\",\r\n    //       },\r\n    //       content: `it's really educational`,\r\n    //     },\r\n    //   ],\r\n    // },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n  Array(20)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"Kevin\",\r\n  },\r\n});\r\n\r\n//reducer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  // immer: 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성 안지켜도 immer가 알아서 지켜줌.)\r\n  // 여기부터는 draft가 state처럼 사용되고 이건 막 바꿔도 됨. (immer가 알아서 처리해 주므로)\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST: {\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        // return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts]; //이렇게 하거나 혹은 아래와 같이 unshift사용 하면 배열값을 따로 정의안하고 (...이 사라 짐) 바로 사용가능 함\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n        // action.data.content, postId, userId;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        //   addPostLoading: false,\r\n        //   addPostDone: true,\r\n        // };\r\n      }\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return { ...state, addPostLoading: false, addPostError: action.error };\r\n      case REMOVE_POST_REQUEST: {\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n        // return { ...state, removePostLoading: true, removePostDone: false, removePostError: null };\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        // action.data.content, postId, userId;\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n        //   removePostLoading: false,\r\n        //   removePostDone: true,\r\n        // };\r\n      }\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = true;\r\n        break;\r\n      // return { ...state, removePostLoading: false, removePostError: action.error };\r\n\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n        // return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\r\n      }\r\n\r\n      //아래 부분 이해 안되면 게시글,댓글 saga 작성 하기 다시 체크. 11:30분 정도\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addcommentDone = true;\r\n        break;\r\n        //위는 immer를 통해서 불변성 신경안쓰고 코딩함. 아래는 기존 방식으로 불변성 신경쓰고 코딩한 내용\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCoomentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      // return { ...state, addCommentLoading: false, addCommentError: action.error };\r\n\r\n      default: {\r\n        break;\r\n        // return { ...state };\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}