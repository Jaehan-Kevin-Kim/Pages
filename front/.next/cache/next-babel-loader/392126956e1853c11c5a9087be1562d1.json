{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, delay, takeLatest, put, throttle, call } from \"redux-saga/effects\"; // import shortId from \"shortid\";\n\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS // generateDummyPost,\n, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`, data);\n}\n\nfunction* retweet(action) {\n  try {\n    // console.log(\"retweet in Saga\");\n    const result = yield call(retweetAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(`/post/images`, data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    // console.log(\"uploadImages in Saga\");\n    const result = yield call(uploadImagesAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    // console.log(\"likePost in Saga\");\n    const result = yield call(likePostAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    // console.log(\"unlikePost in Saga\");\n    const result = yield call(unlikePostAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} //get의 경우 ,뒤의 자리가 data가 아닌 withCredentials의 자리이므로 get에서 data를 보내려면 querystring으로 넣어야 함.(key=value의 형태)\n\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    // console.log(\"loadPost in Saga\");\n    const result = yield call(loadPostAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} //get의 경우 ,뒤의 자리가 data가 아닌 withCredentials의 자리이므로 get에서 data를 보내려면 querystring으로 넣어야 함.(key=value의 형태)\n\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // console.log(\"loadPosts in Saga\");\n    const result = yield call(loadPostsAPI, action.lastId); // yield delay(1000);\n\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    // console.log(\"loadPosts in Saga\");\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId); // yield delay(1000);\n\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); // yield delay(1000);\n    // const id = shortId.generate();\n    // 아래는 post reducer 조작 부분\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data // data: {\n      //   id,\n      //   content: action.data,\n      // },\n\n    }); // 아래는 user reducer 조작 부분\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data); // yield delay(1000);\n    // 아래는 post reducer 조작 부분\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    }); // 아래는 user reducer 조작 부분\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  //POST /post/1/comment\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["F:/Self Study_Coding/Web/Portfolio/React_NodeBird/preapre_second/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","get","loadPost","loadPostsAPI","lastId","loadPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","loadUserPostsAPI","loadUserPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPost","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchLoadHashtagPosts","watchLoadUserPosts","watchAddComment","watchRemovePost","watchAddPost","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, fork, delay, takeLatest, put, throttle, call } from \"redux-saga/effects\";\r\n// import shortId from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  // generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction retweetAPI(data) {\r\n  return axios.post(`/post/${data}/retweet`, data);\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    // console.log(\"retweet in Saga\");\r\n    const result = yield call(retweetAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post(`/post/images`, data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    // console.log(\"uploadImages in Saga\");\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    // console.log(\"likePost in Saga\");\r\n    const result = yield call(likePostAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    // console.log(\"unlikePost in Saga\");\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n//get의 경우 ,뒤의 자리가 data가 아닌 withCredentials의 자리이므로 get에서 data를 보내려면 querystring으로 넣어야 함.(key=value의 형태)\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    // console.log(\"loadPost in Saga\");\r\n    const result = yield call(loadPostAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n//get의 경우 ,뒤의 자리가 data가 아닌 withCredentials의 자리이므로 get에서 data를 보내려면 querystring으로 넣어야 함.(key=value의 형태)\r\nfunction loadPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // console.log(\"loadPosts in Saga\");\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    // console.log(\"loadPosts in Saga\");\r\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    // yield delay(1000);\r\n    // const id = shortId.generate();\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n      // data: {\r\n      //   id,\r\n      //   content: action.data,\r\n      // },\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    // yield delay(1000);\r\n    // 아래는 post reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    // 아래는 user reducer 조작 부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  //POST /post/1/comment\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    // yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLoadHashtagPosts() {\r\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\nfunction* watchLoadUserPosts() {\r\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPost),\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}